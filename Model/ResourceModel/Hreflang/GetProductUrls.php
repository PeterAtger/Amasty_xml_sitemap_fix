<?php

/**
 * @category  Koene
 * @package   Koene_XmlSitemap
 * @author    Peter Atef <info@scandiweb.com>
 * @copyright Copyright (c) 2022 Scandiweb, Inc (https://scandiweb.com)
 * @license   http://opensource.org/licenses/OSL-3.0 The Open Software License 3.0 (OSL-3.0)
 */


namespace Koene\XmlSitemap\Model\ResourceModel\Hreflang;

use Amasty\XmlSitemap\Model\Hreflang\GetBaseStoreUrlsInterface;
use Amasty\XmlSitemap\Model\Hreflang\GetUrlsInterface;
use Magento\CatalogUrlRewrite\Model\ProductUrlRewriteGenerator;
use Amasty\XmlSitemap\Model\ResourceModel\Hreflang\GetProductUrls as AmastyGetProductUrls;

class GetProductUrls extends AmastyGetProductUrls
{
    const ENTITY_INT = 'catalog_product_entity_int';
    const CATALOG_ENTITY = 'catalog_product_entity';
    const EAV_ATTRIBUTE = 'eav_attribute';
    const ATTRIBUTE_CODE = 'attribute_code';
    const ATTRIBUTE_ID = 'attribute_id';
    const IS_ACTIVE = 'status';
    const STORE_ID = 'store_id';
    const ENTITY_ID = 'entity_id';
    const VALUE = 'value';


    /**
     * @var GetBaseStoreUrlsInterface
     */
    private $getBaseStoreUrls;

    public function __construct(
        \Magento\Framework\Model\ResourceModel\Db\Context $context,
        GetBaseStoreUrlsInterface $getBaseStoreUrls,
        $connectionName = null
    ) {
        parent::__construct($context, $getBaseStoreUrls, $connectionName);
        $this->getBaseStoreUrls = $getBaseStoreUrls;
    }

    /**
     * @return void
     */
    protected function _construct()
    {
        $this->_init('url_rewrite', 'entity_id');
    }

    /**
     * @return string
     */
    protected function getActiveId()
    {
        $select = $this->getConnection()->select()
            ->from(
                self::EAV_ATTRIBUTE,
                [self::ATTRIBUTE_ID]
            )
            ->where(
                self::ATTRIBUTE_CODE . '= (?)',
                self::IS_ACTIVE
            );

        return $this->getConnection()->fetchOne($select);
    }

    /**
     * @param array $storeIds
     * @param array $ids
     * @return \Magento\Framework\DB\Select
     */
    public function getRewrites($storeIds)
    {
        $select = $this->getConnection()->select()
            ->from(
                ['main_table' => $this->getMainTable()],
                ['id' => $this->getIdFieldName(), 'store_id', 'url' => 'request_path']
            )->where('target_path NOT LIKE "%category%"')
            ->where('store_id IN(?)', $storeIds)
            ->where('entity_type = ?', ProductUrlRewriteGenerator::ENTITY_TYPE)
            ->where('is_autogenerated = 1')
            ->join(
                ['prod' => self::CATALOG_ENTITY],
                'main_table.entity_id = prod.entity_id',
                []
            );

        return $select;
    }

    /**
     * @return \Magento\Framework\DB\Select
     */
    public function getStatus()
    {
        $activeId = $this->getActiveId();
        $select = $this->getConnection()->select()
            ->from(
                ['main_table' => self::ENTITY_INT],
                [self::ENTITY_ID, self::STORE_ID, self::VALUE]
            )
            ->where(
                self::ATTRIBUTE_ID . '=' . $activeId
            );

        return $select;
    }


    /**
     * @inheritdoc
     */
    public function execute($storeIds, array $ids = null)
    {
        $rewriteSelect = $this->getRewrites($storeIds);

        if (!empty($ids)) {
            $rewriteSelect->where($this->getIdFieldName() . ' IN (?)', $ids);
        }

        $rewriteSelect = $rewriteSelect->assemble();
        $statusSelect = $this->getStatus()->assemble();

        $select = $this->getConnection()->select()
            ->from(
                ['Rewrites' => new \Zend_Db_Expr('(' . $rewriteSelect . ')')],
                ['id', 'store_id', 'url']
            )
            ->joinLeft(
                ['Status' => new \Zend_Db_Expr('(' . $statusSelect . ')')],
                'Status.entity_id = Rewrites.id AND Status.store_id = Rewrites.store_id',
                []
            )->where(
                'Status.value !=2 OR Status.value IS null'
            );

        $storesBaseUrl = $this->getBaseStoreUrls->execute();
        $urls = array_map(
            function ($row) use ($storesBaseUrl) {
                $row['url'] = $storesBaseUrl[$row['store_id']] . ltrim($row['url'], '/');
                return $row;
            },
            $this->getConnection()->fetchAll($select)
        );

        return $urls;
    }
}
